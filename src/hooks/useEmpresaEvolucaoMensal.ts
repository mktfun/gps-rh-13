
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/hooks/useAuth';

// Este √© o "contrato" que diz ao TypeScript como s√£o os dados de DENTRO do objeto retornado pela RPC
interface EvolucaoMensalData {
  mes: string;
  funcionarios: number;
  custo: number;
}

// Este √© o "contrato" para a RESPOSTA COMPLETA da sua fun√ß√£o RPC
interface DashboardMetricsResponse {
  evolucaoMensal: EvolucaoMensalData[];
  // Adicione aqui outras propriedades que sua RPC retorna, se houver
}

export const useEmpresaEvolucaoMensal = () => {
  const { empresaId } = useAuth();

  return useQuery({
    queryKey: ['empresa-evolucao-mensal', empresaId],
    queryFn: async (): Promise<EvolucaoMensalData[]> => {
      console.log('üîç [useEmpresaEvolucaoMensal] Buscando evolu√ß√£o mensal da empresa:', empresaId);

      if (!empresaId) {
        console.error('‚ùå [useEmpresaEvolucaoMensal] Empresa ID n√£o encontrado');
        throw new Error('Empresa ID n√£o encontrado');
      }

      // AGORA VOC√ä USA O CONTRATO, PASSANDO ELE COMO UM GEN√âRICO PARA A FUN√á√ÉO RPC
      const { data, error } = await supabase.rpc<DashboardMetricsResponse>(
        'get_empresa_dashboard_metrics',
        { p_empresa_id: empresaId }
      );

      if (error) {
        console.error('‚ùå [useEmpresaEvolucaoMensal] Erro ao buscar dados do dashboard:', error);
        throw new Error(`Erro ao buscar dados: ${error.message}`);
      }

      console.log('üìä [useEmpresaEvolucaoMensal] Dashboard data raw:', data);

      // COM O TIPO CORRETO, O TYPESCRIPT SABE QUE 'data.evolucaoMensal' EXISTE E √â UM ARRAY.
      // CHEGA DE ERROS.
      const evolucaoMensal = data?.evolucaoMensal || [];
      console.log('üìà [useEmpresaEvolucaoMensal] Evolu√ß√£o mensal extra√≠da:', evolucaoMensal);

      // CORRE√á√ÉO: Garantir que os dados est√£o no formato correto
      const dadosFormatados = Array.isArray(evolucaoMensal) 
        ? evolucaoMensal.map((item: any) => ({
            mes: String(item.mes || ''),
            funcionarios: Number(item.funcionarios || 0),
            custo: Number(item.custo || 0)
          }))
        : [];

      console.log('‚úÖ [useEmpresaEvolucaoMensal] Dados formatados para o gr√°fico:', dadosFormatados);

      return dadosFormatados;
    },
    enabled: !!empresaId,
    retry: 1,
    staleTime: 5 * 60 * 1000, // 5 minutos de cache
    refetchOnWindowFocus: false,
  });
};
