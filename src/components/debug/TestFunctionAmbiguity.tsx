import React, { useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';

export function TestFunctionAmbiguity() {
  useEffect(() => {
    // Fun√ß√£o para testar qual vers√£o est√° sendo chamada
    (window as any).debugFunctionAmbiguity = async (empresaId = 'f5d59a88-965c-4e3a-b767-66a8f0df4e1a') => {
      console.log('üîç [AMBIGUITY TEST] Testando qual vers√£o da fun√ß√£o est√° sendo usada');
      console.log('üîç [AMBIGUITY TEST] EmpresaId:', empresaId);

      // Teste para identificar qual fun√ß√£o o PostgREST est√° escolhendo
      console.log('\n=== TESTE 1: Chamada padr√£o (como no hook) ===');
      try {
        const result1 = await supabase.rpc('get_empresa_dashboard_metrics', {
          p_empresa_id: empresaId
        });
        console.log('üìä [TESTE 1] Resultado da chamada padr√£o:', result1);
        
        if (result1.data) {
          console.log('üìä [TESTE 1] Valores espec√≠ficos:');
          console.log('- totalFuncionarios:', result1.data.totalFuncionarios);
          console.log('- funcionariosAtivos:', result1.data.funcionariosAtivos);
          console.log('- custoMensalTotal:', result1.data.custoMensalTotal);
          
          if (result1.data.totalFuncionarios === 0 && result1.data.funcionariosAtivos === 0) {
            console.error('üö® [PROBLEMA IDENTIFICADO] Fun√ß√£o retorna zeros! Isso indica que:');
            console.error('1. A fun√ß√£o sem par√¢metros est√° sendo chamada');
            console.error('2. A fun√ß√£o com par√¢metros n√£o tem dados para esta empresa');
            console.error('3. H√° erro na l√≥gica SQL da fun√ß√£o');
          }
        }
      } catch (error) {
        console.error('‚ùå [TESTE 1] Erro na chamada padr√£o:', error);
      }

      console.log('\n=== TESTE 2: Verificar se vers√£o sem par√¢metros existe ===');
      try {
        const result2 = await supabase.rpc('get_empresa_dashboard_metrics');
        console.log('üö® [TESTE 2] Vers√£o sem par√¢metros funcionou! Isso √© o problema:', result2);
        console.log('üö® [TESTE 2] PostgREST pode estar escolhendo esta vers√£o por engano');
      } catch (error) {
        console.log('‚úÖ [TESTE 2] Vers√£o sem par√¢metros falhou (isso √© bom):', error.message);
      }

      console.log('\n=== TESTE 3: For√ßar especifica√ß√£o de tipos ===');
      try {
        // Tentar diferentes varia√ß√µes para evitar ambiguidade
        const result3 = await supabase
          .rpc('get_empresa_dashboard_metrics', {
            p_empresa_id: empresaId
          } as { p_empresa_id: string });
        
        console.log('üìä [TESTE 3] Com tipos for√ßados:', result3);
      } catch (error) {
        console.error('‚ùå [TESTE 3] Erro com tipos for√ßados:', error);
      }

      console.log('\n=== TESTE 4: Verificar schema da fun√ß√£o ===');
      try {
        // Query para verificar quais vers√µes da fun√ß√£o existem
        const { data: functions, error: funcError } = await supabase
          .from('pg_proc')
          .select('proname, proargtypes, pronargs')
          .eq('proname', 'get_empresa_dashboard_metrics');
        
        if (funcError) {
          console.log('‚ö†Ô∏è [TESTE 4] N√£o foi poss√≠vel verificar schema (normal):', funcError.message);
        } else {
          console.log('üìã [TESTE 4] Vers√µes da fun√ß√£o encontradas:', functions);
        }
      } catch (error) {
        console.log('‚ö†Ô∏è [TESTE 4] Erro ao verificar schema:', error);
      }

      console.log('\n=== CONCLUS√ÉO ===');
      console.log('Se TESTE 1 retorna zeros E TESTE 2 funciona, o problema √© ambiguidade de fun√ß√£o');
      console.log('Se TESTE 1 retorna zeros E TESTE 2 falha, o problema √© SQL ou dados');
    };

    console.log('üõ†Ô∏è [AMBIGUITY TEST] Fun√ß√£o adicionada: window.debugFunctionAmbiguity(empresaId?)');
  }, []);

  return null;
}
